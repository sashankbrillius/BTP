import { useYouTubeVideos, usePineconeVideos, isYouTubeQuotaExceededError } from "@/hooks/use-youtube-search";
import { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X, ExternalLink, Play } from "lucide-react";
import { VideoCard } from "./video-card";
import { cn } from "@/lib/utils";
import { Link } from "wouter";

interface VideoSuggestionsPanelProps {
  isOpen: boolean;
  onClose: () => void;
  suggestions: string[];
  usePinecone?: boolean;
  className?: string;
}

export function VideoSuggestionsPanel({ 
  isOpen, 
  onClose, 
  suggestions,
  usePinecone = false,
  className 
}: VideoSuggestionsPanelProps) {
  const [quotaExceeded, setQuotaExceeded] = useState(false);
  const yt = useYouTubeVideos(suggestions, 6);
  const pinecone = usePineconeVideos(suggestions.join(" "), { topK: 5, enabled: usePinecone || quotaExceeded });
  const videos = usePinecone || quotaExceeded ? pinecone.data?.videos : yt.data;
  const isLoading = usePinecone || quotaExceeded ? pinecone.isLoading : yt.isLoading;
  const error = usePinecone || quotaExceeded ? pinecone.error : yt.error;

  // Debug: Log Pinecone API response
  if ((usePinecone || quotaExceeded) && pinecone.data) {
    console.log("Pinecone API response:", pinecone.data);
  }

  useEffect(() => {
    if (isYouTubeQuotaExceededError(yt.error)) {
      setQuotaExceeded(true);
    }
  }, [yt.error]);

  const handleVideoClick = (videoId: string, url?: string) => {
    if ((usePinecone || quotaExceeded) && url) {
      window.open(url, '_blank');
    } else {
      window.open(`https://www.youtube.com/watch?v=${videoId}`, '_blank');
    }
  };

  return (
    <div className={cn(
      "bg-white border-l border-gray-200 transition-all duration-300 flex flex-col h-full",
      isOpen ? "w-80 min-w-80" : "w-0",
      "overflow-hidden",
      className
    )}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between">
          <h3 className="font-semibold text-gray-900">Video Suggestions</h3>
          <Button variant="ghost" size="icon" onClick={onClose}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-sm text-gray-600 mt-1">Based on your current topic</p>
      </div>
      {quotaExceeded && (
        <div className="mb-2 p-2 bg-yellow-100 border border-yellow-300 rounded text-yellow-800 text-xs">
          YouTube API quota exceeded. Showing results from Pinecone instead.
        </div>
      )}
      {/* Content */}
      <div className="flex-1 overflow-y-auto p-4">
        {isLoading && (
          <div className="space-y-4">
            {[...Array(3)].map((_, i) => (
              <div key={i} className="animate-pulse">
                <div className="bg-gray-200 rounded-lg h-24 mb-2" />
                <div className="bg-gray-200 h-4 rounded mb-2" />
                <div className="bg-gray-200 h-3 rounded w-3/4" />
              </div>
            ))}
          </div>
        )}

        {error && (
          <div className="text-center py-8">
            <p className="text-red-600 text-sm mb-2">Failed to load video suggestions</p>
            <p className="text-gray-500 text-xs">{error.message}</p>
          </div>
        )}

        {videos && videos.length > 0 && (
          <div className="space-y-4">
            {videos && Array.isArray(videos) && videos.length > 0 && videos.slice(0, 6).map((video: any, idx: number) => {
              // Extract YouTube videoId from url
              let videoId = video.videoId || "";
              if (video.url) {
                const match = video.url.match(/[?&]v=([^&#]+)/) || video.url.match(/youtu\.be\/([^?&#]+)/) || video.url.match(/youtube\.com\/embed\/([^?&#]+)/);
                if (match) videoId = match[1];
              }
              return (
                <VideoCard
                  key={video.videoId || video.id || video.url || idx}
                  video={{
                    ...video,
                    videoId,
                    thumbnail: video.thumbnail || (videoId && !videoId.startsWith("http") ? `https://img.youtube.com/vi/${videoId}/mqdefault.jpg` : undefined)
                  }}
                  onClick={() => handleVideoClick(videoId, video.url)}
                  compact
                />
              );
            })}
          </div>
        )}

        {videos && videos.length === 0 && !isLoading && (
          <div className="text-center py-8">
            <p className="text-gray-500 text-sm">No video suggestions available</p>
          </div>
        )}
      </div>
      {/* Footer */}
      <div className="p-4 border-t border-gray-200 flex-shrink-0">
        <Link href="/video-suggestions">
          <Button variant="default" className="w-full" onClick={onClose}>
            <ExternalLink className="h-4 w-4 mr-2" />
            View All Suggestions
          </Button>
        </Link>
      </div>
    </div>
  );
}
